# -*- Makefile -*-
#
# @configure_input@
#
# CSSC: GNU's Successor to SCCS
#
# [Derived from: MySC
# By Ross Ridge
# Public Domain]
#
# Makefile for compiling under Unix.   Uses ./configure.
#
# $Id: Makefile.in,v 1.3 1997/11/07 23:06:36 james Exp $
# $Log: Makefile.in,v $
# Revision 1.3  1997/11/07 23:06:36  james
# Make sure the RM macro is defined, for non-GNU makes.
#
# Revision 1.2  1997/06/30 22:06:54  james
# Removed unneccessary features still present in this file only because
# it was copied from the one in the parent directory.
#

SHELL = /bin/sh

VPATH = @srcdir@
srcdir = @srcdir@

bindir = $(exec_prefix)/bin
infodir = $(prefix)/info

# Prefix to be prepended to each installed program, normally empty or `g'.
binprefix = 

CXX = @CXX@
CPP = @CPP@
CXXCPP = @CXXCPP@
CC = @CC@
TEMPLATE_CXXFLAGS = -fno-implicit-templates
DIFF = @CONFIG_DIFF_COMMAND@
RM = rm -f


# Flags for use only with 
HAVE_GXX = @GXX@
CXXWARN_GXX = -Wall -Wpointer-arith -Wwrite-strings -Wmissing-prototypes\
	 -Wconversion -Wcast-align -Wstrict-prototypes -Wnested-externs\
	 -Winline -Wno-comment 
CXXFLAGS_GXX_$(HAVE_GXX) = $(CXXWARN_GXX) $(TEMPLATE_CXXFLAGS) \
	-fno-omit-frame-pointer $(EXTRA_CXXFLAGS)
CPPFLAGS = -I.. -I$(srcdir)/.. @CPPFLAGS@

# TODO: When the Makefile is updated using configure, under control of
# make. the CXXFLAGS macro grows to contain multiple copies of $(CXXFLAGS),
# presumably because it is exported.   Refer to some other autoconf-using
# program to see how tis stuff should be done.
CXXFLAGS =$(CPPFLAGS) @CXXFLAGS@ $(CXXFLAGS_GXX_yes)
CFLAGS = $(CPPFLAGS)
LDFLAGS = @LDFLAGS@ $(EXTRA_LDFLAGS)
RANLIB = @RANLIB@
LIBS = $(LIBSUBST) @LIBS@
LIBOBJS = @LIBOBJS@

SRCS = admin.cc cdc.cc delta.cc file.cc fileiter.cc get.cc getopt.cc \
	l-split.cc linebuf.cc mystring.cc pf-add.cc pf-del.cc pfile.cc \
	pipe.cc prompt.cc prs.cc quit.cc rmdel.cc run.cc sact.cc \
	sccsdate.cc sccsfile.cc sccsname.cc sf-add.cc sf-admin.cc sf-cdc.cc \
	sf-chkid.cc sf-delta.cc sf-get.cc sf-get2.cc sf-get3.cc sf-prs.cc \
	sf-rmdel.cc sf-write.cc sid.cc split.cc unget.cc what.cc xalloc.cc \
	rel_list.cc rl-merge.cc

DEPFILES = $(SRCS:.cc=.d)

XCMDS = get.x delta.x admin.x prs.x what.x unget.x sact.x cdc.x rmdel.x
EXTRA_SRCS = _chmod.cc fsync.cc _chmod.cc list.cc sid_list.cc sl-merge.cc
XSRCS = $(XCMDS:.x=.cs)
INCLUDES = version.h defaults.h file.h fileiter.h filelock.h getopt.h \
	linebuf.h list.h cssc.h mystring.h pfile.h pipe.h quit.h run.h \
	sccsdate.h sccsfile.h sccsname.h seqstate.h sf-chkmr.h sid.h \
	sid_list.h stack.h sysdep.h xalloc.h sccsdate.h config.h aconf.h 
CONFIG_SRCS = configure.in aconf.h.in acconfig.h

SOURCEFILES = $(SRCS) $(INCLUDES) $(XSRCS) configure.in aconf.h.in
CONFIGFILES = aconf.h config.cache config.log config.status stamp-h stamp-h.in
LIBSUBST = ../libsubst.a

.SUFFIXES: .x .cs .i .cc .cxx 

.cxx.o: 
	$(CXX) $(CXXFLAGS) -c $<

.cc.o: 
	$(CXX) $(CXXFLAGS) -c $<

.c.o: 
	$(CC) $(CFLAGS) -c $<

.c.s:
	$(CC) $(CFLAGS) -S $<

.c.i:
	$(CPP) $(CPPFLAGS) $< > $@ || $(RM) $@

.cc.i:
	$(CXXCPP) $(CPPFLAGS) $< > $@ || $(RM) $@

.cs.x:
	g++ $(CXXFLAGS) $(LDFLAGS) -o $@ \
		-x c++ $< -x none ../version.o $(LIBS)

XADMINSRCS = 	admin.cc quit.cc xalloc.cc mystring.cc sccsname.cc	\
		sid.cc sccsdate.cc linebuf.cc file.cc split.cc 		\
		getopt.cc fileiter.cc sccsfile.cc sf-admin.cc 		\
		sf-chkid.cc sf-write.cc sf-add.cc run.cc l-split.cc 	\
		prompt.cc rel_list.cc rl-merge.cc 

XGETSRCS = 	get.cc quit.cc xalloc.cc mystring.cc sccsname.cc sid.cc \
		sccsdate.cc linebuf.cc file.cc split.cc getopt.cc 	\
		fileiter.cc sccsfile.cc sf-get.cc sf-get2.cc sf-get3.cc \
		sf-chkid.cc pfile.cc pf-add.cc 





# default rule
all: $(XCMDS) 

xgcc: $(XCMDS)

get: $(GETOBJS) $(LIBS)
	$(CXX) $(LDFLAGS) -o get $(GETOBJS) $(LIBS)

delta: $(DELTAOBJS) $(LIBS)
	$(CXX) $(LDFLAGS) -o delta $(DELTAOBJS) $(LIBS)

admin: $(ADMINOBJS) $(LIBS)
	$(CXX) $(LDFLAGS) -o admin $(ADMINOBJS) $(LIBS)

prs: $(PRSOBJS) $(LIBS)
	$(CXX) $(LDFLAGS) -o prs $(PRSOBJS) $(LIBS)

prt: $(PRTOBJS) $(LIBS)
	$(CXX) $(LDFLAGS) -o $@ $(PRTOBJS) $(LIBS)

what: $(WHATOBJS) $(LIBS)
	$(CXX) $(LDFLAGS) -o what $(WHATOBJS) $(LIBS)

unget: $(UNGETOBJS) $(LIBS)
	$(CXX) $(LDFLAGS) -o unget $(UNGETOBJS) $(LIBS)

sact: $(SACTOBJS) $(LIBS)
	$(CXX) $(LDFLAGS) -o sact $(SACTOBJS) $(LIBS)

cdc: $(CDCOBJS) $(LIBS)
	$(CXX) $(LDFLAGS) -o cdc $(CDCOBJS) $(LIBS)

rmdel: $(RMDELOBJS) $(LIBS)
	$(CXX) $(LDFLAGS) -o rmdel $(RMDELOBJS) $(LIBS)

sl-test: sid.h sid.cc sid_list.h sid_list.cc
	$(CXX) $(CFLAGS) $(LDFLAGS) -DTEST -o sl-test sid_list.c


passwdfiles:	test
	for i in 1 2 3 4 5 6; do cp /etc/passwd test/passwd.$$i && echo "This is file number" $$i >> test/passwd.$$i ; done

gtest:		testinit passwdfiles
	rm -f test/[xz].*
	-rm -f test/[spx].passwd
	./admin -itest/passwd.1 test/s.passwd
	./get -e -g test/s.passwd
	cp test/passwd.2 passwd
	./delta -Y test/s.passwd
	./get -e -g test/s.passwd
	cp test/passwd.3 passwd
	./delta -Y test/s.passwd
	./get -e -g -x1.2 test/s.passwd
	cp test/passwd.4 passwd
	./delta -Y test/s.passwd
	./get -e -g test/s.passwd
	cp test/passwd.5 passwd
	./delta -Y test/s.passwd
	./get -e -g -r1.3 test/s.passwd
	cp test/passwd.6 passwd
	./delta -Y test/s.passwd
	./get -r1.1 -p test/s.passwd > test/passwd.m1
	$(DIFF) test/passwd.1 test/passwd.m1
	./get -r1.2 -p test/s.passwd > test/passwd.m2
	$(DIFF) test/passwd.2 test/passwd.m2
	./get -r1.3 -p test/s.passwd > test/passwd.m3
	$(DIFF) test/passwd.3 test/passwd.m3
	./get -r1.4 -p test/s.passwd > test/passwd.m4
	$(DIFF) test/passwd.4 test/passwd.m4
	./get -r1.5 -p test/s.passwd > test/passwd.m5
	$(DIFF) test/passwd.5 test/passwd.m5
	./get -r1.3.1.1 -p test/s.passwd > test/passwd.m6
	$(DIFF) test/passwd.6 test/passwd.m6

# Create the directory in which to perform the tests.
test:	
	rm -rf test
	mkdir test

testinit:	test passwdfiles
	rm -f test/[xz].*
	-rm -f test/[spx].passwd


## depend: $(SRCS) $(XSRCS) $(INCLUDES) config.h
## 	   sed -e '/^# YOW.$$/p' -e '/^# YOW.$$/,$$d' Makefile > makefile.new
## 	   gcc $(CFLAGS) -MM $(SRCS) $(XSRCS) | sed -e "s/\.cs\.o/.x/" -e "s/ :/:/" -e "s/ cf-[^.]*\.h//" >> makefile.new

install: install-sh all

sources: $(SOURCEFILES)
libs: $(LIBSUBST)

clean:
	-$(RM) $(CMDS) $(XCMDS)
	-$(RM) *.o *.d
	-$(RM) core

clobber: clean
	-$(RM) TAGS tags $(CONFIGFILES) $(LIBSUBST)

spotless: clobber
	-$(RM) configure
	-rcsclean
	$(RM) Makefile 


##
# Prevent GNU make v3 from overflowing arg limit on SysV.
.NOEXPORT:
