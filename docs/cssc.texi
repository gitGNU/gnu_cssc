\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename cssc.info
@settitle CSSC: Compatibly Stupid Source Control
@finalout
@setchapternewpage odd
@c %**end of header

@set EDITION 1.0
@set VERSION 0.01-devel
@set UPDATED Sat May 31 11:31:51 1997

@ifinfo
This file documents the the GNU @code{cssc} package for working with
SCCS files.

Copyright (C) 1997, Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end ifinfo

@titlepage
@title CSSC
@subtitle Compatibly Stupid Source Control
@subtitle Edition @value{EDITION}, for CSSC Version @value{VERSION}
@subtitle @value{UPDATED}
@author by James Youngman

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1997 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end titlepage

@node Top, , , (dir)

@ifinfo
This file documents the the GNU @code{CSSC} package, which is 
a workalike for the traditional Unix SCCS suite.
@end ifinfo

@menu
* Overview::		Preliminary information.
* Interface::		How to use the suite.
* Invoking Programs::	How to run the individual CSSC programs.
* Incomplete::		Missing Features.
* Problems::		Reporting bugs.
* Copying::		How you can copy and share @code{CSSC}.
* Concept Index::	Index of concepts.
@end menu

@node Overview, Interface, , Top
@chapter Overview
@cindex overview

The GNU @code{cssc} program is designed to be a compatible replacement
for the traditional Unix SCCS suite.

This documentation is horrendously incomplete since this package is
still under development.

While it is strongly suggested that new projects not use this package,
sometimes existing projects require the use of SCCS files.  While
conversion to other formats is possible, this is also sometimes
impractical.   See the documentation for CVS and RCS. 
@xref{What is CVS?, ,What is CVS?, cvs, The CVS Manual}.  See also the
manual pages for RCS.

GNU CSSC is published under the GNU General Public License, which is
designed to protect your rights, as the user of this program.  You have
the right to modify this program, and distribute it.  You also have
responsibilities to those to whom you distribute copies, as detailed in
the license.  @xref{Copying,,GNU General Public License}.

@cindex Ross Ridge
@cindex MySC
@cindex author
GNU @code{CSSC} was originally based on the public-domain package
@code{MySC}, which was written by Ross Ridge.   The enhancement work was
done by James Youngman. 


@node Interface, Invoking Programs, Overview, Top
@chapter How to use the suite
@cindex interface
@cindex Emacs
@cindex VC-mode

By far the easiest way to use @code{CSSC} (or indeed @code{SCCS}) is 
to use VC-mode in GNU Emacs.  @xref{Version Systems, ,Version
Systems,emacs,The GNU Emacs manual}.

If you can't use VC-mode, the @sc{bsd} command @code{sccs} is a good
interface to the @sc{sccs} suite (and hence @sc{cssc}).  However, it is
not yet integrated into this package. 

Failing that, you will need to use each of the programs in the suite
individually.  

@node Invoking Programs, Incomplete, Interface, Top
@chapter Invoking CSSC programs
@cindex invoking

@ifinfo 
The menu items are arranged in approximate order of 
frequency of use, except @code{admin}, which is first
because you have to use it to start with.
@end ifinfo

@iftex
The commands in the CSSC suite are described in alphabetical order.
Ordered by the frequency with which I use them, they are:-
@code{sccs, get, delta, what, sccsdiff, unget, admin,}
@code{prs, sact, rmdel, cdc, prt, comb, help, val.}
@end iftex

@menu
* admin::         Creating and administering SCCS files
* sccs::          A more helpful front-end from BSD
* get::           Checking-out a version for compilation or editing
* delta::         Checking-in a revised version
* what::          Identifying versions of files.
* sccsdiff::      Finding the changes between two revisions
* unget::         When you don't want to edit the file after all
* prs::           Displaying the revision history of a file
* sact::          Show which SCCS files are being edited
* rmdel::         Expunging changes or backing out of a check-in
* cdc::           Changing revision comments after the fact
* prt::           Printing the delta table of a file
* comb::          Creating a shell archive of an SCCS file
* help::          Unimplemented hints on obscure error messages
* val::           Validating an SCCS file for integrity
@end menu

@node admin, cdc, , Invoking Programs
@section @code{admin}
@cindex admin
@cindex sccs-admin
@cindex ctreating SCCS files

To create an SCCS archive of a source file @file{foo.c}, do
@example
admin -ifoo.c s.foo.c
@end example
This creates the archive file @file{s.foo.c} and initialises it
with the current contents of your source file, @file{foo.c}.  If you use
Emacs as your editor, you can just use @kbd{C-x v i} instead.

Another frequently-used option is @samp{-b}, which indicates that the
file is to be treated as a binary file rather than as text.  You might
want to do this because the file actually contains binary data, or just
characters that have other meanings within an SCCS file, for example
@samp{^A}, the character whose code is 1.

@table @samp

@item -a xxx
Add user or group @samp{xxx} the the list of those authorised 
to check revisions in or out.  Untested.

@item -b
Ensure that the file is encoded as a binary file.   Unimplemenmted.

@item -dF
Delete flag @samp{F} from the flags present in the file (@pxref{flags}).
Untested.

@item -e xxx
Erase the specified user or group from the list of those authorised to
check revisions in or out.  Untested.

@item -fF [xxx]
Add the flag @samp{F} (with optional value @samp{xxx}) to the file's 
flags (@pxref{flags}).  Untested.

@cindex checksum
@item -h
Check the SCCS file's checksum.  Untested.

@item -ifoo
Initialise the SCCS file with the contents of @file{foo}.  If no
argument is given, read from standard input.  This implies the @samp{-n}
option.

@item -lrel1,rel2,...
Unlock the specified releases.   If @samp{a} is specified as the
release, that denotes ``all releases''.  Untested.

@item -mMR-list
When initialising a file, add the specified list of @sc{mr} numbers
(@pxref{mr-numbers}) to the delta commentary for the initial version.
This list can be empty.  The specified @sc{mr}s are validated according
to the setting of the @var{v} flag, which should be set (@pxref{flags}).
If the @var{v} flag is set but has no value (i.e. is set to the empty
string), validation silently succeeds.  If the @var{v} flag is not set,
the @samp{-m} option causes @code{delta} to fail.

@item -n
Create a new SCCS file.

@item -rN
Set the initial release number to @samp{N}.  The initial level within
that release is always 1.  Untested.

@item -tdesc
Read in descriptive text for this file from @file{desc}.  This replaces
any existing description.  If no argument, remove any existing
description (this is illegal if @samp{-i} or @samp{-n} is used).

@item -V 
Display version information.  Untested.

@item -yadayada
When intialising a file, set the comment for that delta to
@samp{adayada}.  If the option is given just as @samp{-y}, the comment
is recorded as empty.  The following word in the argument list is not
used as the comment.  @emph{Note that this behaviour is different to
most Unix programs, but is the same as the behaviour of traditional
@sc{sccs}}.

@item -z
Fix the checksum information.  Untested.
@end table


@node flags, mr-numbers, ,admin
@subsection SCCS file flags
@cindex flags

Flags are set and cleared with the @code{admin} program.  @xref{admin}.

@unnumberedsubsubsec Boolean Flags 
@table @samp
@item b
Enable branch deltas: this enables the @samp{-b} option of get
(@pxref{get}).
@item i
Make @code{get} and @code{delta} exit unsuccessfully when the
@samp{Warning: No id keywords} message is issued.
@item j
Enables concurrent updates: if you try to get a revision for editing,
this normally fails if another user already has the file locked.
Setting the @samp{j} flag overrides this.
@item n
Create empty relases when the @samp{-r} option to @code{get} is used to
skip releases.   These empty releases can later serve as branch points.
@end table

@unnumberedsubsubsec Numerical Flags 
@table @samp
@item c
Set the release ceiling.  Releases higher than the ceiling cannot be
checked out.
@item f
Set the release floor.  Releases lower then the release floor cannot be
checked out.
@item d
Set the default delta which is used when the @code{get} command is given
without the @samp{-r} option.   The default behaviour for @code{get} is
defined in @ref{get}.
@item l
Set the locked release list.  These releases cannot be checked out with
@code{get -e}.   The special value @samp{a} denotes all releases.
@item q
Sets the value substituted for the @samp{%Q%} keyword as described in
@ref{keyword substitution}.  This flag is referred to in the output of
SCCS as @samp{csect name}, and is variously referred to here as that, or
the "user flag" or the "Q flag".
@item m
Sets the overridden value for the @samp{%M%} keyword as described in
@ref{keyword substitution}.
@item t
Sets the value for the @samp{%Y%} keyword as described in @ref{keyword
substitution}.
@item v
Sets the name of the program used to validate @sc{mr} (modification
request) numbers; @sc{mr}s are described in @ref{mr-numbers}.  This flag
can be set to the empty string, in which case @sc{mr}s are allowed and
the validation silently succeeds without any program being run.
@end table

@node mr-numbers, , flags, admin
@subsection Modification Request numbers
@cindex mr-numbers
@sc{mr}s are identifiers that can be specified when checking in a
revision using @samp{delta} (or even using @samp{admin}, when creating a
file). 

If the @samp{v} (``validate'') flag is set, the user running
@samp{delta} is prompted for @sc{mr} numbers as well as revision
comments.  If this flag is not set, no validation is performed and no
@sc{mr} numbers are prompted for.  If the @samp{-m} option is given on
the command line for @samp{delta}, the user is not prompted.

@sc{mr} numbers are not required by @sc{cssc} to be actual numbers; they
may contain any non-whitespace printable characters; other
implementations may not be so flexible.


@node cdc, comb, admin, Invoking Programs
@section @code{cdc}
@cindex cdc
@cindex sccs-cdc
@cindex change delta commentary
Nothing here, sorry.

@node comb, delta, cdc, Invoking Programs
@section @code{comb}
@cindex comb
@cindex sccs-comb
Nothing here, sorry.

@node delta, get, comb, Invoking Programs
@section @code{delta}
@cindex delta
@cindex sccs-delta
@cindex checking in new revisions
The @code{delta} command is used to add a new revision to the ones
already stored in an SCCS file.  Before being able to do this you need
to run @kbd{get -e} to check the file out for editing.

@cindex SID
@cindex release
@cindex level
@cindex branch
@cindex sequence
A new revision is created by the @code{delta} program.  These revisions
are each identified by a unique @dfn{SID}.  A @sc{sid} looks like
@samp{1.2.3.4}, where the four numbers are the @dfn{release},
@dfn{level}, @dfn{branch} and @dfn{sequence} numbers.

New revisions on the main sequence (the @dfn{trunk}) have no branch or
sequence numbers and so just have two number components (@samp{1.2}, for
example).

@node get, help, delta, Invoking Programs
@section @code{get}
@cindex get
@cindex sccs-get
@cindex checking-out previous revisions
@cindex retrieving previous revisions
@cindex locking revisions for update
@cindex new versions
The @code{get} command is to retrieve previous revisions from an SCCS
file.  With the @samp{-e} option, it also locks the gotten revision so
that a modified version can be checked in later using @code{delta}.  


@menu
* Basic Usage: get usage.           Frequently-used @samp{get} commands
* Options: get options.             Full list of options
* Keywords: keyword substitution.   Keyword Substitution
@end menu

@node get usage, get options, , get
@subsection Basic Usage for @code{get}
@table @samp
There are very few common basic usage patterns for @samp{get}.  Below,
@file{s.foo.c} denotes the name of any existing @sc{sccs} file.

@item get s.foo.c
Get a copy of the most recent trunk revision of @file{s.foo.c} into the
file @file{foo.c}.

@item get -Gbar s.foo.c
Get a version from @file{s.foo.c}, into @file{bar} rather than the
default @file{foo.c}.

@item get -r1.3 s.foo.c
Get revision 1.3 from @file{s.foo.c} into @file{foo.c}.  The @samp{-G}
option can be used to set the name of the gotten file.

@item get -p s.foo.c
Get the most recent trunk revision, and print it on standard output.
The @samp{-r} option could also be used to specify some other revision.
@end table

@node get options, , get usage, get
@subsection Options for @code{get}
@table @samp
Full decription of options
@item -a@i{N}
Retrieve the version corresponding to the delta sequence number
@i{N}.  Mainly for use by other programs in the suite.   Untested.

@item -b
Create a new branch when the resulting file is checked back in.  Used
with the @samp{-e} option.

@cindex time travel
@item -c@i{when}
Get the version that was current at the time specified by @i{when}.  The
format of the argument is yy[mm[dd[hh[mm[ss]]]]].  Any fields omitted
assume their maximum possible values so that if you specify @samp{-c92},
you get the latest version which was available in the year 1992.  This
option is obviously not year-2000-proof.  Untested.

@item -D
Turns on debugging output, indicating what is going on as the SCCS file
is read.  This option may go away or have its behaviour change in the
near future.

@item -e
Indicates that the gotten version is for editing.   When checked back in
the resulting file will have a new revision number.  The gotten file is
writable, and keyword substitution does not take place.  A @dfn{p-file}
is created; this file contains information about what versions of the
s-file are being edited, and by whom.

@item -g
Do a dry-run, showing what version would be gotten, but don't actually
get the file.  This is sometimes done by scripts, just to test the exit
status.  

@item -G@i{foo}
Name the gotten file @file{foo}, instead of the default name.

@item -i@i{list}
Include the deltas for the listed @sc{sid}s.  See also @samp{-x}.  Untested.

@item -k
Avoid doing keyword substitution (@pxref{keyword substitution}).  This
is assumed when @samp{-e} is specified.  Untested.

@item -l
Unsupported.

@item -lp
Unsupported.

@item -m
Prepend to each line of the result the @sc{sid} correspoding to the
@samp{delta} which introduced this line to the file.  Untested.

@item -n
Precede each line of output with the module name, before any @sc{sid}
added with the @samp{-m} option.  Untested.

@item -p
Write the result to the standard output, rather than to a file.  

@item -r@i{X}
Retrieve version X, rather than the default.

@item -s
Run silently.

@item -t
Get the ``top'' delta for the indicated release.   Used by @samp{comb}.
@xref{comb}.

@item -V
Show version information.

@item -w@i{XXX}
When performing keyword substitution (@pxref{keyword substitution}), use
XXX rather than @samp{%Z%%M% <@sc{tab}> %I%} as the substitution value for %W%.

@item -x@i{list}
Exclude the indicated deltas from the result.  Deltas are indicated by
specifying the @sc{sid} at which they arrived in the file.

@end table

@node keyword substitution, , , get
@subsection Keyword Substitution
@cindex keyword substitution
Keyword substitution is performed unless the @samp{-k} option or the
@samp{-e} option is given to @code{get}.

@ref{what} contains a keyword substitution example.

The keywords are all of the form @samp{%@i{x}%} where @i{x} stands for
an upper-case letter, one of:

@table @asis

@item A
Expands to the same as @samp{%Z% %Y% %M% %I% %Z%}.
@item B
The branch number of the gotten version
@item C
Current line in the output file
@item D
The date at the time the file was gotten, in the form @i{yy/mm/dd}
@item E
The date that the newest delta in the gotten file was applied, @i{yy/mm/dd}
@item F
Name of the SCCS file, for example @samp{s.foo.c}.
@item G
As for %E%, but in the US format @i{mm/dd/yy}.  Year-2000-broken.
@item H
As for %D%, but in the US format @i{mm/dd/yy}.  Year-2000-broken.
@item I
Expands to the same as %R%.%L%.%B%.%S%, that is, the @sc{sid} of the
gotten version.
@item L
The level number of the gotten version.
@item M
Module name: the value of the @code{m} (module) flag, or the base name
of the SCCS file with the @file{s.} removed if the module flag is unset.
@item P
Full name of the SCCS file.
@item Q
Value of the @code{q} flag.  The @code{q} flag has no other purpose, and
can be set with @samp{admin -fq@r{foo}}.   @xref{flags}.
@item R
Release number of the gotten version.
@item S
Sequence number of the gotten version.
@item T
Current time (@i{hh:mm:ss}) when the file was gotten, see %D% and %H%.
@item W
Expands to %Z% %M% <@sc{tab}> %I% or the argument for the @samp{-w}
flag, if given.
@item Y
Value of the @code{t} (moudule type) flag.
@item Z
The literal string @code{@@(#)}.  @xref{what}.
@end table

@node help, prs, get, Invoking Programs
@section @code{help}
@cindex help
@cindex sccs-help
Nothing here, sorry.

@node prs, prt, help, Invoking Programs
@section @code{prs}
@cindex prs
@cindex sccs-prs
@cindex revision summary
Nothing here, sorry.

@node prt, rmdel, prs, Invoking Programs
@section @code{prt}
@cindex prt
@cindex sccs-prt
This program is not yet fully implemented, and hence not yet documented here.

@node rmdel, sact, prt, Invoking Programs
@section @code{rmdel}
@cindex rmdel
@cindex sccs-rmdel
@cindex backing out of changes
@cindex censoring revisions
Nothing here, sorry.

@node sact, sccs, rmdel, Invoking Programs
@section @code{sact}
@cindex sact
@cindex sccs-sact
Nothing here, sorry.

@node sccs, sccsdiff, sact, Invoking Programs
@section @code{sccs}
@cindex sccs
Sorry, @code{sccs} is not integrated into this package, although it is
available separately in source form.  You may find one on a BSD mirror.
Eventually, @code{sccs} will be integrated, though.

@node sccsdiff, unget, sccs, Invoking Programs
@section @code{sccsdiff}
@cindex sccsdiff
@cindex sccs-sccsdiff
@cindex dufferences between revisions
Nothing here, sorry.

@node unget, val, sccsdiff, Invoking Programs
@section @code{unget}
@cindex unget
@cindex sccs-unget
Nothing here, sorry.

@node val, what, unget, Invoking Programs
@section @code{val}
@cindex val
@cindex sccs-val
@cindex validating SCCS files
This program is not yet implemented, and hence not yet documented here.

@node what, , val, Invoking Programs
@section @code{what}
@cindex what
@cindex @@(#)
@cindex identification string
The @code{what} program is designed to search in files for the
recognition string @samp{@@(#)}.  All the strings it finds matching this
are printed on standard output.

@subsection Options for @code{what}
@code{what [-s] [-V] file [file ...]}
@table @samp
@item -s
Exit successfully after finding the first string.
@item -V
Show version information for @code{what}.
@end table

@subsection Example

While the file is being edited (either at first or after @samp{get -e}):-
@example
#ifndef CONFIG_NO_SCCS_IDS
static const char sccs_id[] = "%W%";
#endif
@end example

When the file is checked out for compiling (with @code{get}):-
@example
#ifndef CONFIG_NO_SCCS_IDS
static const char sccs_id[] = "@@(#)foo.c        1.3";
#endif
@end example

After compiling:-
@example
$ what foo
foo:
        @@(#)foo.c       1.3
@end example

If the executable is linked from several source files, you will get a
line of output for each string containing the identification string.
This is useful for finding out exactly what code went into an
executable.  This technique also works on object files, archive
libraries, text files, and in fact any sorts of files at all.

Unlike the @code{strings} command, there is no way to make @code{what}
operate on standard input.  The data would need to be written to a file
first.

The rationale for the preprocessor construct @code{CONFIG_NO_SCCS_IDS}
is that sometimes compilers or lint-pickers complain that the variable
@var{sccs_id} is unused, and defining @code{CONFIG_NO_SCCS_IDS} will
remove these @sc{id}s and thus silence the warnings.

@node Incomplete, Problems, Invoking Programs, Top
@chapter Missing Features
@cindex missing features

@itemize @bullet

@item
Documentation is incomplete or missing.  That includes this document.

@item
Some programs are missing, that is, some programs are present in the
SCCS suite and absent from this one.

@item 
Some programs behave subtly differently to their original counterparts.
There are two reasons for this:-

@itemize --
@item
The procesing of command-line options is done in a way which is
standard for GNU programs, and this is incompatible with the way SCCS
processes its command-line options.  This is being changed, and so for
the moment there will be some inconsistency.  You will be able to tell
if this has been fixed in the version of @sc{cssc} you are using
because this paragraph will be missing.

@item
Error messages are different, and also extra warnings are provided in 
some circumstances.

@item 
If a bug is listed in @samp{docs/TODO} but has in fact been fixed, this
is a bug in the bug list.  Please report this.

@item
All other differences are also bugs.  Please report them 
(@pxref{Problems}).
@end itemize

@item
Some programs are partially implemented.  Not all programs support all
the command-line options of their original counterparts.  Also, some
features are currently missing, for example there is no support for
encoded binary files (this mainly affects @code{delta} and @code{get}).
If you would like support for some feature that is missing, please
request it in the same way you would report a bug; I'd like to know
which features are required first.
@end itemize

@section Known Problems

There are a small number of known problems documented in the files
@samp{docs/BUGS} and @samp{docs/TODO}.  These will be fixed at some
point in the future.

Additionally, there is currently one problem that may not ever be fixed.
This problem occurs only in the @code{prt} program when the list of
ignored or excluded deltas is present for a @sc{sid} @emph{but that list is
empty}.  In this case @sc{sccs} prints the @samp{Included:} or
@samp{Excluded:} line in its output (with no numbers afterward) and
@sc{cssc} prints nothing.  Since ``fixing'' this problem would require a
horrible kludge, this has not been done.  It is not expected that this
will cause a problem for any users; if this is a problem for you, let
the maintainer know and it will be fixed.

@node Problems, Copying, Incomplete, Top
@chapter Reporting Bugs
@cindex bugs
@cindex problems
@cindex maintainer

If you find a bug in GNU @code{CSSC}, please send electronic mail to
@w{@samp{jay@@gnu.ai.mit.edu}}.  Include the version number, which you
can find by giving the option @w{@samp{--version}} to any @code{CSSC}
command.  Also include in your message the output that the program
produced and the output you expected.  An @code{s.} file and
instructions for reproducing the error are almost essential unless the
bug is very trivial.@refill

Because the author receives electronic mail on the other side of a
Microsoft Mail gateway, @sc{mime}-encoded mail will be unintelligible by
the time it reaches him.  Please encode any files with @samp{uuencode}
first (please also compress them, preferably with GNU @samp{gzip}, if
they are large files).  ``Microsoft'' is a registered trademark of
Microsoft Corporation.@refill

If you have other questions, comments or suggestions about GNU
@code{CSSC}, contact the maintainer via electronic mail to
@w{@samp{jay@@gnu.ai.mit.edu}}.

@node Copying, Concept Index, Problems, Top
@c @ignore
@include gpl.texi
@c @end ignore

@node Concept Index, , Copying, Top
@unnumbered Concept Index

@cindex tail recursion
@printindex cp

@shortcontents
@contents
@bye
